# This script will monitor the Office 365 license count and send an email if the available licenses are below a certain threshold
# The script is designed to be run as an Azure Automation Runbook
# The runbook needs to have a System-Assigned Managed Identity with the following permissions assigned to it's associated Enterprise Application in Azure AD:
#   - Directory.Read.All
#   - Mail.ReadWrite
# The script uses the Microsoft Graph PowerShell modules to connect to Microsoft Graph and send an email
# The script uses Azure Automation Variables to store the alert threshold, sender email address, recipient email address, and the last time the email was sent
# The script is designed to be run on a schedule, such as daily, to monitor the license count
# If the available licenses are below the alert threshold, an email will be sent to the recipient email address
# The script will not send another email if the last email was sent less than 7 days ago

# Import the Graph Modules we need
Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Identity.DirectoryManagement
Import-Module Microsoft.Graph.Mail
Import-Module Microsoft.Graph.Users
Import-Module Microsoft.Graph.Users.Actions

# Connect to Microsoft Graph with System-Assigned Managed Identity
Connect-MgGraph -Identity

# Get the sku for the O365 License (replace 'ENTERPRISEPACK_GOV' with the appropriate SKU)
$sku = Get-MgSubscribedSku -All -Property * | Where-Object SkuPartNumber -eq 'ENTERPRISEPACK_GOV'

# Set the counts of licenses
$TotalLicenses = $sku.PrepaidUnits.Enabled
$AssignedLicenses = $sku.ConsumedUnits
$AvailableLicenses = $TotalLicenses - $AssignedLicenses
$PercentageUsed = [math]::Round(($AssignedLicenses / $TotalLicenses) * 100, 2)

# Set the alert threshold
$alertThreshold = Get-AutomationVariable -Name 'O365LicenseAlertThreshold'

# Set the email sender account ID
$senderAddress = Get-AutomationVariable -Name 'EmailFromAddress'
$senderID = Get-MgUser -Filter "mail eq '$($senderAddress)'" | Select-Object -ExpandProperty Id

# Set the recipient email address
$recipientAddress = Get-AutomationVariable -Name 'LicenseNotificationRecipient'

# Get the last time the email was sent
[DateTime]$lastSent = Get-AutomationVariable -Name 'O365EmailLastSent'

# Output some information for logging
Write-Output "Total Licenses: $TotalLicenses"
Write-Output "Assigned Licenses: $AssignedLicenses"
Write-Output "Available Licenses: $AvailableLicenses"
Write-Output "Percentage Used: $($PercentageUsed)%"
Write-Output "Alert Threshold: $alertThreshold"
Write-Output "Sender ID: $senderID"
Write-Output "Recipient Address: $recipientAddress"
Write-Output "Last Email Sent: $lastSent"

# Set email parameters
$subject = "Office 365 License Count Warning - $(Get-Date -Format 'yyyy-MM-dd')"

$body = "<html><body>
<p>This is an automated message to inform you that the Office 365 license count is getting low.</p>
<p>The current license usage is:</p>
<ul>
  <li>Total Licenses: $TotalLicenses</li>
  <li>Assigned Licenses: $AssignedLicenses</li>
  <li><u><b>Available Licenses: $AvailableLicenses</b></u></li>
  <li>Percentage Used: $PercentageUsed%</li>
</ul>
<p>Please take action to ensure that licenses do not run out.</p>
<p>Thank you.</p>
<br />
<br />
<p><i>This message was generated by the Runbook 'NameofRunbookHere' on Automation Account 'yourAutomationAccountHere'</i></p>
</body></html>"

$params = @{
  Message = @{
    Subject = $subject
    Importance = "High"
    Body = @{
      ContentType = "HTML"
      Content = $body
    }
    ToRecipients = @(
      @{
        EmailAddress = @{
          # Address = "user@domain.com" # can be used to test
          Address = $recipientAddress
        }
      }
    )
  }
  SaveToSentItems = "false"
}

# If the licenses available is less than $alertThreshold, send the email
if ($AvailableLicenses -lt $alertThreshold) {
  # If the last email was sent less than 7 days ago, don't send another
  if ($null -ne $lastSent -and (Get-Date) -lt ($lastSent).AddDays(7)) {
    Write-Output "Last email sent less than 7 days ago, not sending another"
    exit
  }
  else {
    Write-Output "Last email sent more than 7 days ago, sending another"

    # Send the email
    Send-MgUserMail -UserId $senderID -BodyParameter $params

    # Set the O365EmailLastSent Variable to now
    [String]$DateTimeNow = Get-Date
    Set-AutomationVariable -Name 'O365EmailLastSent' -Value $DateTimeNow
  }
}
else {
  Write-Output "Available licenses are greater than $alertThreshold, not sending an email"
}
